generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model category {
  id           String     @id
  name         String     @unique(map: "Category_name_key")
  parentId     String?
  parent       category?  @relation("CategorySubcategory", fields: [parentId], references: [id], onDelete: Cascade)
  subcategories category[] @relation("CategorySubcategory")
  product      product[]

  @@index([parentId], map: "Category_parentId_fkey")
}

model customer_order {
  id                     String                   @id
  name                   String
  lastname               String
  phone                  String
  email                  String
  company                String
  adress                 String
  apartment              String
  postalCode             String
  dateTime               DateTime?                @default(now())
  status                 String
  total                  Int
  city                   String
  country                String
  orderNotice            String?
  userId                 String
  user                   user                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  customer_order_product customer_order_product[]
}

model customer_order_product {
  id              String         @id
  customerOrderId String
  productId       String
  quantity        Int
  customer_order  customer_order @relation(fields: [customerOrderId], references: [id])
  product         product        @relation(fields: [productId], references: [id])

  @@index([customerOrderId], map: "customer_order_product_customerOrderId_fkey")
  @@index([productId], map: "customer_order_product_productId_fkey")
}

model image {
  imageID   String @id
  productID String
  image     String
}

model product {
  id                     String                   @id
  slug                   String                   @unique(map: "Product_slug_key")
  title                  String
  mainImage              String
  price                  Int                      @default(0)
  rating                 Int                      @default(0)
  description            String
  manufacturer           String
  inStock                Int                      @default(1)
  categoryId             String
  customer_order_product customer_order_product[]
  category               category                 @relation(fields: [categoryId], references: [id], onDelete: Cascade, map: "Product_categoryId_fkey")
  wishlist               wishlist[]

  @@index([categoryId], map: "Product_categoryId_fkey")
}

model user {
  id       String     @id
  email    String     @unique(map: "User_email_key")
  password String?
  role     String?    @default("user")
  wishlist wishlist[]
  customer_orders customer_order[]
}

model wishlist {
  id        String  @id
  productId String
  userId    String
  product   product @relation(fields: [productId], references: [id], onDelete: Cascade, map: "Wishlist_productId_fkey")
  user      user    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Wishlist_userId_fkey")

  @@index([productId], map: "Wishlist_productId_fkey")
  @@index([userId], map: "Wishlist_userId_fkey")
}

model Otp {
  id        String   @id @default(uuid())
  email     String
  otp       String
  expiresAt DateTime
}